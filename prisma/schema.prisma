generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id        Int       @id @default(autoincrement())
  type      String
  message   String
  data      Json?     @map("data")
  timestamp DateTime  @default(now()) @db.Timestamp(6)

  @@map("activity_logs")
}

model Connection {
  id              Int       @id @default(autoincrement())
  name            String
  host            String
  port            Int
  securityPolicy  String    @default("None") @map("security_policy")
  securityMode    String    @default("None") @map("security_mode")
  username        String?
  password        String?
  isActive        Boolean   @default(false) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("connections")
}

model Person {
  id         Int       @id @default(autoincrement())
  name       String
  location   String?
  latitude   Float?
  longitude  Float?
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  tags       Tag[]

  @@map("people")
}

model Reading {
  id        Int       @id @default(autoincrement())
  tagId     Int       @map("tag_id")
  value     Float?
  quality   String
  timestamp DateTime  @default(now()) @db.Timestamp(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("readings")
}

model SubscriptionSetting {
  id                  Int      @id @default(autoincrement())
  publishingInterval  Int      @default(1000) @map("publishing_interval")
  samplingInterval    Int      @default(500) @map("sampling_interval")
  queueSize           Int      @default(10) @map("queue_size")
  isDefault           Boolean  @default(false) @map("is_default")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("subscription_settings")
}

model Tag {
  id            Int        @id @default(autoincrement())
  nodeId        String     @map("node_id") @unique
  browseName    String     @map("browse_name")
  displayName   String     @map("display_name")
  description   String?
  dataType      String?    @map("data_type")
  isSubscribed  Boolean    @default(false) @map("is_subscribed")
  personId      Int?       @map("person_id")
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?  @updatedAt @map("updated_at") @db.Timestamp(6)
  readings      Reading[]
  person        Person?    @relation(fields: [personId], references: [id], onUpdate: NoAction)

  @@map("tags")
}
